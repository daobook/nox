# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2016, Alethea Katherine Flowers
# This file is distributed under the same license as the Nox package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2022.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Nox 2022.1.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-01-27 11:17+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.9.0\n"

#: ../../config.rst:2
msgid "Configuration & API"
msgstr ""

#: ../../config.rst:5
msgid "Noxfile"
msgstr ""

#: ../../config.rst:7
msgid ""
"Nox looks for configuration in a file named ``noxfile.py`` by default. "
"You can specify a different file using the ``--noxfile`` argument when "
"running ``nox``."
msgstr ""

#: ../../config.rst:12
msgid "Defining sessions"
msgstr ""

#: nox.registry.session_decorator:1 of
msgid "Designate the decorated function as a session."
msgstr ""

#: ../../config.rst:16
msgid ""
"Nox sessions are configured via standard Python functions that are "
"decorated with ``@nox.session``. For example:"
msgstr ""

#: ../../config.rst:27
msgid ""
"You can also configure sessions to run against multiple Python versions "
"as described in :ref:`virtualenv config` and  parametrize sessions as "
"described in :ref:`parametrized sessions <parametrized>`."
msgstr ""

#: ../../config.rst:31
msgid "Session description"
msgstr ""

#: ../../config.rst:33
msgid ""
"You can add a description to your session using a `docstring "
"<https://www.python.org/dev/peps/pep-0257>`__. The first line will be "
"shown when listing the sessions. For example:"
msgstr ""

#: ../../config.rst:45 ../../config.rst:68
msgid "The ``nox --list`` command will show:"
msgstr ""

#: ../../config.rst:55
msgid "Session name"
msgstr ""

#: ../../config.rst:57
msgid ""
"By default Nox uses the decorated function's name as the session name. "
"This works wonderfully for the vast majority of projects, however, if you"
" need to you can customize the session's name by using the ``name`` "
"argument to ``@nox.session``. For example:"
msgstr ""

#: ../../config.rst:76
msgid "And you can tell ``nox`` to run the session using the custom name:"
msgstr ""

#: ../../config.rst:87
msgid "Configuring a session's virtualenv"
msgstr ""

#: ../../config.rst:89
msgid ""
"By default, Nox will create a new virtualenv for each session using the "
"same interpreter that Nox uses. If you installed Nox using Python 3.6, "
"Nox will use Python 3.6 by default for all of your sessions."
msgstr ""

#: ../../config.rst:91
msgid ""
"You can tell Nox to use a different Python interpreter/version by "
"specifying the ``python`` argument (or its alias ``py``) to "
"``@nox.session``:"
msgstr ""

#: ../../config.rst:101
msgid ""
"The Python binaries on Windows are found via the Python `Launcher`_ for "
"Windows (``py``). For example, Python 3.9 can be found by determining "
"which executable is invoked by ``py -3.9``. If a given test needs to use "
"the 32-bit version of a given Python, then ``X.Y-32`` should be used as "
"the version."
msgstr ""

#: ../../config.rst:108
msgid ""
"You can also tell Nox to run your session against multiple Python "
"interpreters. Nox will create a separate virtualenv and run the session "
"for each interpreter you specify. For example, this session will run "
"twice - once for Python 2.7 and once for Python 3.6:"
msgstr ""

#: ../../config.rst:116
msgid ""
"When you provide a version number, Nox automatically prepends python to "
"determine the name of the executable. However, Nox also accepts the full "
"executable name. If you want to test using pypy, for example:"
msgstr ""

#: ../../config.rst:124
msgid ""
"When collecting your sessions, Nox will create a separate session for "
"each interpreter. You can see these sessions when running ``nox --list``."
" For example this Noxfile:"
msgstr ""

#: ../../config.rst:132
msgid "Will produce these sessions:"
msgstr ""

#: ../../config.rst:142
msgid ""
"Note that this expansion happens *before* parameterization occurs, so you"
" can still parametrize sessions with multiple interpreters."
msgstr ""

#: ../../config.rst:144
msgid ""
"If you want to disable virtualenv creation altogether, you can set "
"``python`` to ``False``, or set ``venv_backend`` to ``\"none\"``, both "
"are equivalent. Note that this can be done temporarily through the :ref"
":`--no-venv <opt-force-venv-backend>` commandline flag, too."
msgstr ""

#: ../../config.rst:152
msgid ""
"Use of :func:`session.install()` is deprecated without a virtualenv since"
" it modifies the global Python environment. If this is what you really "
"want, use :func:`session.run()` and pip instead."
msgstr ""

#: ../../config.rst:160
msgid ""
"You can also specify that the virtualenv should *always* be reused "
"instead of recreated every time:"
msgstr ""

#: ../../config.rst:170
msgid ""
"You are not limited to virtualenv, there is a selection of backends you "
"can choose from as venv, conda, mamba, or virtualenv (default):"
msgstr ""

#: ../../config.rst:178
msgid "Finally, custom backend parameters are supported:"
msgstr ""

#: ../../config.rst:188
msgid "Passing arguments into sessions"
msgstr ""

#: ../../config.rst:190
msgid ""
"Often it's useful to pass arguments into your test session. Here's a "
"quick example that demonstrates how to use arguments to run tests against"
" a particular file:"
msgstr ""

#: ../../config.rst:207
msgid "Now you if you run:"
msgstr ""

#: ../../config.rst:215 ../../config.rst:229
msgid "Then nox will run:"
msgstr ""

#: ../../config.rst:222
msgid "But if you run:"
msgstr ""

#: ../../config.rst:239
msgid "Parametrizing sessions"
msgstr ""

#: ../../config.rst:241
msgid ""
"Session arguments can be parametrized with the :func:`nox.parametrize` "
"decorator. Here's a typical example of parametrizing the Django version "
"to install:"
msgstr ""

#: ../../config.rst:251
msgid "When you run ``nox``, it will create a two distinct sessions:"
msgstr ""

#: ../../config.rst:263
msgid ""
":func:`nox.parametrize` has an interface and usage intentionally similar "
"to `pytest's parametrize "
"<https://pytest.org/latest/parametrize.html#_pytest.python.Metafunc.parametrize>`_."
msgstr ""

#: nox._parametrize.parametrize_decorator:1 of
msgid "Parametrize a session."
msgstr ""

#: nox._parametrize.parametrize_decorator:3 of
msgid ""
"Add new invocations to the underlying session function using the list of "
"``arg_values_list`` for the given ``arg_names``. Parametrization is "
"performed during session discovery and each invocation appears as a "
"separate session to nox."
msgstr ""

#: nox._parametrize.parametrize_decorator nox.sessions.Session.notify
#: nox.sessions.Session.run nox.sessions.Session.run_always of
msgid "参数"
msgstr ""

#: nox._parametrize.parametrize_decorator:8 of
msgid "A list of argument names."
msgstr ""

#: nox._parametrize.parametrize_decorator:10 of
msgid ""
"The list of argument values determines how often a session is invoked "
"with different argument values. If only one argument name was specified "
"then this is a simple list of values, for example ``[1, 2, 3]``. If N "
"argument names were specified, this must be a list of N-tuples, where "
"each tuple-element specifies a value for its respective argument name, "
"for example ``[(1, 'a'), (2, 'b')]``."
msgstr ""

#: nox._parametrize.parametrize_decorator:18 of
msgid "Optional sequence of test IDs to use for the parametrized arguments."
msgstr ""

#: ../../config.rst:267
msgid ""
"You can also stack the decorator to produce sessions that are a "
"combination of the arguments, for example:"
msgstr ""

#: ../../config.rst:278
msgid ""
"If you run ``nox --list``, you'll see that this generates the following "
"set of sessions:"
msgstr ""

#: ../../config.rst:288
msgid ""
"If you only want to run one of the parametrized sessions, see "
":ref:`running_paramed_sessions`."
msgstr ""

#: ../../config.rst:292
msgid "Giving friendly names to parametrized sessions"
msgstr ""

#: ../../config.rst:294
msgid ""
"The automatically generated names for parametrized sessions, such as "
"``tests(django='1.9', database='postgres')``, can be long and unwieldy to"
" work with even with using :ref:`keyword filtering <opt-sessions-pythons-"
"and-keywords>`. You can give parametrized sessions custom IDs to help in "
"this scenario. These two examples are equivalent:"
msgstr ""

#: ../../config.rst:315
msgid "When running ``nox --list`` you'll see their new IDs:"
msgstr ""

#: ../../config.rst:322
msgid "And you can run them with ``nox --sessions \"tests(old)\"`` and so on."
msgstr ""

#: ../../config.rst:324
msgid ""
"This works with stacked parameterizations as well. The IDs are combined "
"during the combination. For example:"
msgstr ""

#: ../../config.rst:340
msgid "Produces these sessions when running ``nox --list``:"
msgstr ""

#: ../../config.rst:351
msgid "Parametrizing the session Python"
msgstr ""

#: ../../config.rst:353
msgid ""
"You can use parametrization to select the Python interpreter for a "
"session. These two examples are equivalent:"
msgstr ""

#: ../../config.rst:367
msgid ""
"The first form can be useful if you need to exclude some combinations of "
"Python versions with other parameters. For example, you may want to test "
"against multiple versions of a dependency, but the latest version doesn't"
" run on older Pythons:"
msgstr ""

#: ../../config.rst:389
msgid "The session object"
msgstr ""

#: ../../config.rst:393
msgid ""
"Nox will call your session functions with a an instance of the "
":class:`Session` class."
msgstr ""

#: nox.sessions.Session:1 of
msgid "The Session object is passed into each user-defined session function."
msgstr ""

#: nox.sessions.Session:3 of
msgid ""
"This is your primary means for installing package and running commands in"
" your Nox session."
msgstr ""

#: nox.sessions.Session.bin:1 of
msgid "The first bin directory for the virtualenv."
msgstr ""

#: nox.sessions.Session.bin_paths:1 of
msgid "The bin directories for the virtualenv."
msgstr ""

#: nox.sessions.Session.cache_dir:1 of
msgid "Create and return a 'shared cache' directory to be used across sessions."
msgstr ""

#: nox.sessions.Session.chdir:1 of
msgid "An alias for :meth:`chdir`."
msgstr ""

#: nox.sessions.Session.chdir:1 of
msgid "Change the current working directory."
msgstr ""

#: nox.sessions.Session.chdir:3 of
msgid ""
"Can be used as a context manager to automatically restore the working "
"directory::"
msgstr ""

#: nox.sessions.Session.conda_install:1 of
msgid ""
"Install invokes `conda install`_ to install packages inside of the "
"session's environment."
msgstr ""

#: nox.sessions.Session.conda_install:4 nox.sessions.Session.install:4 of
msgid "To install packages directly::"
msgstr ""

#: nox.sessions.Session.conda_install:10 nox.sessions.Session.install:10 of
msgid "To install packages from a ``requirements.txt`` file::"
msgstr ""

#: nox.sessions.Session.conda_install:15 of
msgid ""
"By default this method will detect when internet connection is not "
"available and will add the `--offline` flag automatically in that case. "
"To disable this behaviour, set `auto_offline=False`."
msgstr ""

#: nox.sessions.Session.conda_install:19 of
msgid ""
"To install the current package without clobbering conda-installed "
"dependencies::"
msgstr ""

#: nox.sessions.Session.conda_install:26 of
msgid ""
"You can specify a conda channel using `channel=`; a falsy value will not "
"change the current channels. You can specify a list of channels if "
"needed."
msgstr ""

#: nox.sessions.Session.conda_install:30 nox.sessions.Session.install:21 of
msgid "Additional keyword args are the same as for :meth:`run`."
msgstr ""

#: nox.sessions.Session.create_tmp:1 of
msgid "Create, and return, a temporary directory."
msgstr ""

#: nox.sessions.Session.debug:1 of
msgid "Outputs a debug-level message during the session."
msgstr ""

#: nox.sessions.Session.env:1 of
msgid "A dictionary of environment variables to pass into all commands."
msgstr ""

#: nox.sessions.Session.error:1 of
msgid "Immediately aborts the session and optionally logs an error."
msgstr ""

#: nox.sessions.Session.install:1 of
msgid ""
"Install invokes `pip`_ to install packages inside of the session's "
"virtualenv."
msgstr ""

#: nox.sessions.Session.install:15 of
msgid "To install the current package::"
msgstr ""

#: nox.sessions.Session.interactive:1 of
msgid ""
"Returns True if Nox is being run in an interactive session or False "
"otherwise."
msgstr ""

#: nox.sessions.Session.invoked_from:1 of
msgid "The directory that Nox was originally invoked from."
msgstr ""

#: nox.sessions.Session.invoked_from:3 of
msgid ""
"Since you can use the ``--noxfile / -f`` command-line argument to run a "
"Noxfile in a location different from your shell's current working "
"directory, Nox automatically changes the working directory to the "
"Noxfile's directory before running any sessions. This gives you the "
"original working directory that Nox was invoked form."
msgstr ""

#: nox.sessions.Session.log:1 of
msgid "Outputs a log during the session."
msgstr ""

#: nox.sessions.Session.name:1 of
msgid "The name of this session."
msgstr ""

#: nox.sessions.Session.notify:1 of
msgid "Place the given session at the end of the queue."
msgstr ""

#: nox.sessions.Session.notify:3 of
msgid ""
"This method is idempotent; multiple notifications to the same session "
"have no effect."
msgstr ""

#: nox.sessions.Session.notify:6 of
msgid ""
"A common use case is to notify a code coverage analysis session from a "
"test session::"
msgstr ""

#: nox.sessions.Session.notify:18 of
msgid "Now if you run `nox -s test`, the coverage session will run afterwards."
msgstr ""

#: nox.sessions.Session.notify:20 of
msgid ""
"The session to be notified. This may be specified as the appropriate "
"string (same as used for ``nox -s``) or using the function object."
msgstr ""

#: nox.sessions.Session.notify:24 of
msgid ""
"If given, sets the positional arguments *only* for the queued session. "
"Otherwise, the standard globally available positional arguments will be "
"used instead."
msgstr ""

#: nox.sessions.Session.posargs:1 of
msgid ""
"Any extra arguments from the ``nox`` commandline or "
":class:`Session.notify`."
msgstr ""

#: nox.sessions.Session.python:1 of
msgid "The python version passed into ``@nox.session``."
msgstr ""

#: nox.sessions.Session.run:1 of
msgid "Run a command."
msgstr ""

#: nox.sessions.Session.run:3 of
msgid "Commands must be specified as a list of strings, for example::"
msgstr ""

#: nox.sessions.Session.run:8 of
msgid ""
"You **can not** just pass everything as one string. For example, this "
"**will not work**::"
msgstr ""

#: nox.sessions.Session.run:13 of
msgid "You can set environment variables for the command using ``env``::"
msgstr ""

#: nox.sessions.Session.run:19 of
msgid ""
"You can also tell nox to treat non-zero exit codes as success using "
"``success_codes``. For example, if you wanted to treat the ``pytest`` "
"\"tests discovered, but none selected\" error as success::"
msgstr ""

#: nox.sessions.Session.run:27 of
msgid ""
"On Windows, builtin commands like ``del`` cannot be directly invoked, but"
" you can use ``cmd /c`` to invoke them::"
msgstr ""

#: nox.sessions.Session.run:32 of
msgid ""
"If ``session.run`` fails, it will stop the session and will not run the "
"next steps. Basically, this will raise a Python exception. Taking this in"
" count, you can use a ``try...finally`` block for cleanup runs, that will"
" run even if the other runs fail::"
msgstr ""

#: nox.sessions.Session.run:42 nox.sessions.Session.run_always:14 of
msgid ""
"A dictionary of environment variables to expose to the command. By "
"default, all environment variables are passed."
msgstr ""

#: nox.sessions.Session.run:45 nox.sessions.Session.run_always:17 of
msgid "Silence command output, unless the command fails. ``False`` by default."
msgstr ""

#: nox.sessions.Session.run:47 nox.sessions.Session.run_always:19 of
msgid ""
"A list of return codes that are considered successful. By default, only "
"``0`` is considered success."
msgstr ""

#: nox.sessions.Session.run:50 nox.sessions.Session.run_always:22 of
msgid ""
"If False (the default) then programs not in the virtualenv path will "
"cause a warning. If True, no warning will be emitted. These warnings can "
"be turned into errors using ``--error-on-external-run``. This has no "
"effect for sessions that do not have a virtualenv."
msgstr ""

#: nox.sessions.Session.run_always:1 of
msgid "Run a command **always**."
msgstr ""

#: nox.sessions.Session.run_always:3 of
msgid ""
"This is a variant of :meth:`run` that runs even in the presence of "
"``--install-only``. This method returns early if ``--no-install`` is "
"specified and the virtualenv is being reused."
msgstr ""

#: nox.sessions.Session.run_always:7 of
msgid "Here are some cases where this method is useful:"
msgstr ""

#: nox.sessions.Session.run_always:9 of
msgid ""
"You need to install packages using a command other than ``pip install`` "
"or ``conda install``."
msgstr ""

#: nox.sessions.Session.run_always:11 of
msgid ""
"You need to run a command as a prerequisite of package installation, such"
" as building a package or compiling a binary extension."
msgstr ""

#: nox.sessions.Session.skip:1 of
msgid "Immediately skips the session and optionally logs a warning."
msgstr ""

#: nox.sessions.Session.virtualenv:1 of
msgid "The virtualenv that all commands are run in."
msgstr ""

#: nox.sessions.Session.warn:1 of
msgid "Outputs a warning during the session."
msgstr ""

#: ../../config.rst:402
msgid "Modifying Nox's behavior in the Noxfile"
msgstr ""

#: ../../config.rst:404
msgid ""
"Nox has various :doc:`command line arguments <usage>` that can be used to"
" modify its behavior. Some of these can also be specified in the Noxfile "
"using ``nox.options``. For example, if you wanted to store Nox's "
"virtualenvs in a different directory without needing to pass it into "
"``nox`` every time:"
msgstr ""

#: ../../config.rst:416
msgid "Or, if you wanted to provide a set of sessions that are run by default:"
msgstr ""

#: ../../config.rst:426
msgid "The following options can be specified in the Noxfile:"
msgstr ""

#: ../../config.rst:428
msgid ""
"``nox.options.envdir`` is equivalent to specifying :ref:`--envdir <opt-"
"envdir>`."
msgstr ""

#: ../../config.rst:429
msgid ""
"``nox.options.sessions`` is equivalent to specifying :ref:`-s or "
"--sessions <opt-sessions-pythons-and-keywords>`. If set to an empty list,"
" no sessions will be run if no sessions were given on the command line, "
"and the list of available sessions will be shown instead."
msgstr ""

#: ../../config.rst:430
msgid ""
"``nox.options.pythons`` is equivalent to specifying :ref:`-p or --pythons"
" <opt-sessions-pythons-and-keywords>`."
msgstr ""

#: ../../config.rst:431
msgid ""
"``nox.options.keywords`` is equivalent to specifying :ref:`-k or "
"--keywords <opt-sessions-pythons-and-keywords>`."
msgstr ""

#: ../../config.rst:432
msgid ""
"``nox.options.default_venv_backend`` is equivalent to specifying "
":ref:`-db or --default-venv-backend <opt-default-venv-backend>`."
msgstr ""

#: ../../config.rst:433
msgid ""
"``nox.options.force_venv_backend`` is equivalent to specifying :ref:`-fb "
"or --force-venv-backend <opt-force-venv-backend>`."
msgstr ""

#: ../../config.rst:434
msgid ""
"``nox.options.reuse_existing_virtualenvs`` is equivalent to specifying "
":ref:`--reuse-existing-virtualenvs <opt-reuse-existing-virtualenvs>`. You"
" can force this off by specifying ``--no-reuse-existing-virtualenvs`` "
"during invocation."
msgstr ""

#: ../../config.rst:435
msgid ""
"``nox.options.stop_on_first_error`` is equivalent to specifying :ref"
":`--stop-on-first-error <opt-stop-on-first-error>`. You can force this "
"off by specifying ``--no-stop-on-first-error`` during invocation."
msgstr ""

#: ../../config.rst:436
msgid ""
"``nox.options.error_on_missing_interpreters`` is equivalent to specifying"
" :ref:`--error-on-missing-interpreters <opt-error-on-missing-"
"interpreters>`. You can force this off by specifying ``--no-error-on-"
"missing-interpreters`` during invocation."
msgstr ""

#: ../../config.rst:437
msgid ""
"``nox.options.error_on_external_run`` is equivalent to specifying :ref"
":`--error-on-external-run <opt-error-on-external-run>`. You can force "
"this off by specifying ``--no-error-on-external-run`` during invocation."
msgstr ""

#: ../../config.rst:438
msgid ""
"``nox.options.report`` is equivalent to specifying :ref:`--report <opt-"
"report>`."
msgstr ""

#: ../../config.rst:441
msgid ""
"When invoking ``nox``, any options specified on the command line take "
"precedence over the options specified in the Noxfile. If either "
"``--sessions`` or ``--keywords`` is specified on the command line, *both*"
" options specified in the Noxfile will be ignored."
msgstr ""

#: ../../config.rst:445
msgid "Nox version requirements"
msgstr ""

#: ../../config.rst:447
msgid ""
"Nox version requirements can be specified in your Noxfile by setting "
"``nox.needs_version``. If the Nox version does not satisfy the "
"requirements, Nox exits with a friendly error message. For example:"
msgstr ""

#: ../../config.rst:461
msgid "Any of the version specifiers defined in `PEP 440`_ can be used."
msgstr ""

#: ../../config.rst:463
msgid ""
"Version requirements *must* be specified as a string literal, using a "
"simple assignment to ``nox.needs_version`` at the module level. This "
"allows Nox to check the version without importing the Noxfile."
msgstr ""

